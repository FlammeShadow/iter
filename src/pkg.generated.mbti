// Generated using `moon info`, DON'T EDIT IT
package "YumeXi/iter"

// Values
fn[A] empty() -> T[A]

fn[A] from_array(Array[A]) -> T[A]

fn[A] from_iter(Iter[A]) -> T[A]

fn[A] new(() -> A?) -> T[A]

fn range(start~ : Int, end? : Int, step? : Int, inclusive? : Bool) -> T[Int]

fn[A : Compare] range_by(start~ : A, end? : A, step~ : (A) -> A) -> T[A]

fn[A] repeat(A) -> T[A]

fn[A] repeat_by(() -> A) -> T[A]

fn[A] seq(init~ : A, step~ : (A) -> A, cond~ : (A) -> Bool) -> T[A]

fn[A] singleton(A) -> T[A]

fn[A, S] unfold(init~ : S, step~ : (S) -> (A, S)?) -> T[A]

fn[A, S] unfold_eager(init~ : S, step~ : (S) -> (A, S)?) -> T[A]

// Errors

// Types and methods
pub struct T[A] {
  mut run : () -> A?
}
fn[A] T::append(Self[A], A) -> Self[A]
fn[A] T::collect(Self[A]) -> Array[A]
fn[A] T::concat(Self[A], Self[A]) -> Self[A]
fn[A] T::count(Self[A]) -> Int
fn[A] T::drop(Self[A], Int) -> Self[A]
fn[A] T::drop_while(Self[A], (A) -> Bool) -> Self[A]
fn[A] T::each(Self[A], (A) -> Unit) -> Unit
fn[A] T::eachi(Self[A], (Int, A) -> Unit) -> Unit
fn[A] T::filter(Self[A], (A) -> Bool) -> Self[A]
fn[A, B] T::filter_map(Self[A], (A) -> B?) -> Self[B]
fn[A] T::find_first(Self[A], (A) -> Bool) -> A?
fn[A, B] T::flat_map(Self[A], (A) -> Self[B]) -> Self[B]
fn[A] T::flatten(Self[Self[A]]) -> Self[A]
fn[A, B] T::fold(Self[A], init~ : B, (B, A) -> B) -> B
fn[A] T::intersperse(Self[A], A) -> Self[A]
fn[A] T::iter(Self[A]) -> Iter[A]
fn[A, B] T::iter2(Self[(A, B)]) -> Iter2[A, B]
fn[A : Show] T::join(Self[A], separator~ : String) -> String
fn[A] T::last(Self[A]) -> A?
fn[A, B] T::map(Self[A], (A) -> B) -> Self[B]
fn[A, B] T::mapi(Self[A], (Int, A) -> B) -> Self[B]
fn[A : Compare] T::maximum(Self[A]) -> A?
fn[A : Compare] T::minimum(Self[A]) -> A?
fn[A] T::next(Self[A]) -> A?
fn[A] T::nth(Self[A], Int) -> A?
fn[A] T::op_add(Self[A], Self[A]) -> Self[A]
fn[A] T::peek(Self[A]) -> A?
fn[A] T::prepend(Self[A], A) -> Self[A]
fn[A] T::span(Self[A], (A) -> Bool) -> (Self[A], Self[A])
fn[A] T::take(Self[A], Int) -> Self[A]
fn[A] T::take_while(Self[A], (A) -> Bool) -> Self[A]
fn[A, E : Error] T::try_collect(Self[Result[A, E]]) -> Array[A] raise E
fn[A, B] T::zip(Self[A], Self[B]) -> Self[(A, B)]
impl[A : Show] Show for T[A]

// Type aliases

// Traits

