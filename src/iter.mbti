package YumeXi/iter

// Values
fn empty[A]() -> T[A]

fn from_array[A](Array[A]) -> T[A]

fn from_iter[A](Iter[A]) -> T[A]

fn new[A](() -> A?) -> T[A]

fn range(Int, end? : Int, step~ : Int = .., inclusive~ : Bool = ..) -> T[Int]

fn range_by[A : Compare](A, end? : A, step~ : (A) -> A) -> T[A]

fn repeat[A](A) -> T[A]

fn repeat_by[A](() -> A) -> T[A]

fn seq[A](init~ : A, step~ : (A) -> A, cond~ : (A) -> Bool) -> T[A]

fn singleton[A](A) -> T[A]

fn unfold[A, S](state~ : S, step~ : (S) -> (A, S)?) -> T[A]

fn unfold_eager[A, S](state~ : S, step~ : (S) -> (A, S)?) -> T[A]

// Types and methods
pub struct T {
  run : () -> A?
}
impl T {
  append[A](Self[A], A) -> Self[A]
  collect[A](Self[A]) -> Array[A]
  concat[A](Self[A], Self[A]) -> Self[A]
  count[A](Self[A]) -> Int
  drop[A](Self[A], Int) -> Self[A]
  drop_while[A](Self[A], (A) -> Bool) -> Self[A]
  each[A](Self[A], (A) -> Unit) -> Unit
  eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  filter[A](Self[A], (A) -> Bool) -> Self[A]
  filter_map[A, B](Self[A], (A) -> B?) -> Self[B]
  find_first[A](Self[A], (A) -> Bool) -> A?
  flat_map[A, B](Self[A], (A) -> Self[B]) -> Self[B]
  flatten[A](Self[Self[A]]) -> Self[A]
  fold[A, B](Self[A], init~ : B, (B, A) -> B) -> B
  intersperse[A](Self[A], A) -> Self[A]
  iter[A](Self[A]) -> Iter[A]
  join[A : Show](Self[A], separator~ : String) -> String
  last[A](Self[A]) -> A?
  map[A, B](Self[A], (A) -> B) -> Self[B]
  mapi[A, B](Self[A], (Int, A) -> B) -> Self[B]
  max[A : Compare](Self[A]) -> A?
  min[A : Compare](Self[A]) -> A?
  next[A](Self[A]) -> A?
  op_add[A](Self[A], Self[A]) -> Self[A]
  peek[A](Self[A]) -> A?
  prepend[A](Self[A], A) -> Self[A]
  take[A](Self[A], Int) -> Self[A]
  take_while[A](Self[A], (A) -> Bool) -> Self[A]
  try_collect[A, E : Error](Self[Result[A, E]]) -> Array[A]!E
  zip[A, B](Self[A], Self[B]) -> Self[(A, B)]
}

// Type aliases

// Traits

