package YumeXi/iter

// Values
fn empty[A]() -> T[A]

fn from_array[A](Array[A]) -> T[A]

fn from_iter[A](Iter[A]) -> T[A]

fn range(Int, end? : Int, step~ : Int = .., inclusive~ : Bool = ..) -> T[Int]

fn repeat[A](A) -> T[A]

fn repeat_by[A](() -> A) -> T[A]

fn singleton[A](A) -> T[A]

// Types and methods
pub struct T {
  run : () -> A?
}
impl T {
  collect[A](Self[A]) -> Array[A]
  count[A](Self[A]) -> Int
  drop[A](Self[A], Int) -> Self[A]
  drop_while[A](Self[A], (A) -> Bool) -> Self[A]
  each[A](Self[A], (A) -> Unit) -> Unit
  eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  filter[A](Self[A], (A) -> Bool) -> Self[A]
  filter_map[A, B](Self[A], (A) -> B?) -> Self[B]
  flat_map[A, B](Self[A], (A) -> Self[B]) -> Self[B]
  flatten[A](Self[Self[A]]) -> Self[A]
  intersperse[A](Self[A], A) -> Self[A]
  iter[A](Self[A]) -> Iter[A]
  join[A : Show](Self[A], separator~ : String) -> String
  map[A, B](Self[A], (A) -> B) -> Self[B]
  mapi[A, B](Self[A], (Int, A) -> B) -> Self[B]
  next[A](Self[A]) -> A?
  peek[A](Self[A]) -> A?
  take[A](Self[A], Int) -> Self[A]
  take_while[A](Self[A], (A) -> Bool) -> Self[A]
  zip[A, B](Self[A], Self[B]) -> Self[(A, B)]
}

// Type aliases

// Traits

