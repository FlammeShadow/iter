package "YumeXi/iter"

// Values
fn append[A](T[A], A) -> T[A]

fn collect[A](T[A]) -> Array[A]

fn concat[A](T[A], T[A]) -> T[A]

fn count[A](T[A]) -> Int

fn drop[A](T[A], Int) -> T[A]

fn drop_while[A](T[A], (A) -> Bool) -> T[A]

fn each[A](T[A], (A) -> Unit) -> Unit

fn eachi[A](T[A], (Int, A) -> Unit) -> Unit

fn empty[A]() -> T[A]

fn filter[A](T[A], (A) -> Bool) -> T[A]

fn filter_map[A, B](T[A], (A) -> B?) -> T[B]

fn find_first[A](T[A], (A) -> Bool) -> A?

fn flat_map[A, B](T[A], (A) -> T[B]) -> T[B]

fn flatten[A](T[T[A]]) -> T[A]

fn fold[A, B](T[A], init~ : B, (B, A) -> B) -> B

fn from_array[A](Array[A]) -> T[A]

fn from_iter[A](Iter[A]) -> T[A]

fn intersperse[A](T[A], A) -> T[A]

fn iter[A](T[A]) -> Iter[A]

fn iter2[A, B](T[(A, B)]) -> Iter2[A, B]

fn join[A : Show](T[A], separator~ : String) -> String

fn last[A](T[A]) -> A?

fn map[A, B](T[A], (A) -> B) -> T[B]

fn mapi[A, B](T[A], (Int, A) -> B) -> T[B]

fn maximum[A : Compare](T[A]) -> A?

fn minimum[A : Compare](T[A]) -> A?

fn new[A](() -> A?) -> T[A]

fn next[A](T[A]) -> A?

fn nth[A](T[A], Int) -> A?

fn op_add[A](T[A], T[A]) -> T[A]

fn peek[A](T[A]) -> A?

fn prepend[A](T[A], A) -> T[A]

fn range(Int, end? : Int, step~ : Int = .., inclusive~ : Bool = ..) -> T[Int]

fn range_by[A : Compare](A, end? : A, step~ : (A) -> A) -> T[A]

fn repeat[A](A) -> T[A]

fn repeat_by[A](() -> A) -> T[A]

fn seq[A](init~ : A, step~ : (A) -> A, cond~ : (A) -> Bool) -> T[A]

fn singleton[A](A) -> T[A]

fn span[A](T[A], (A) -> Bool) -> (T[A], T[A])

fn take[A](T[A], Int) -> T[A]

fn take_while[A](T[A], (A) -> Bool) -> T[A]

fn try_collect[A, E : Error](T[Result[A, E]]) -> Array[A]!E

fn unfold[A, S](state~ : S, step~ : (S) -> (A, S)?) -> T[A]

fn unfold_eager[A, S](state~ : S, step~ : (S) -> (A, S)?) -> T[A]

fn zip[A, B](T[A], T[B]) -> T[(A, B)]

// Types and methods
pub struct T[A] {
  mut run : () -> A?
}
impl T {
  append[A](Self[A], A) -> Self[A]
  collect[A](Self[A]) -> Array[A]
  concat[A](Self[A], Self[A]) -> Self[A]
  count[A](Self[A]) -> Int
  drop[A](Self[A], Int) -> Self[A]
  drop_while[A](Self[A], (A) -> Bool) -> Self[A]
  each[A](Self[A], (A) -> Unit) -> Unit
  eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  filter[A](Self[A], (A) -> Bool) -> Self[A]
  filter_map[A, B](Self[A], (A) -> B?) -> Self[B]
  find_first[A](Self[A], (A) -> Bool) -> A?
  flat_map[A, B](Self[A], (A) -> Self[B]) -> Self[B]
  flatten[A](Self[Self[A]]) -> Self[A]
  fold[A, B](Self[A], init~ : B, (B, A) -> B) -> B
  intersperse[A](Self[A], A) -> Self[A]
  iter[A](Self[A]) -> Iter[A]
  iter2[A, B](Self[(A, B)]) -> Iter2[A, B]
  join[A : Show](Self[A], separator~ : String) -> String
  last[A](Self[A]) -> A?
  map[A, B](Self[A], (A) -> B) -> Self[B]
  mapi[A, B](Self[A], (Int, A) -> B) -> Self[B]
  maximum[A : Compare](Self[A]) -> A?
  minimum[A : Compare](Self[A]) -> A?
  next[A](Self[A]) -> A?
  nth[A](Self[A], Int) -> A?
  op_add[A](Self[A], Self[A]) -> Self[A]
  peek[A](Self[A]) -> A?
  prepend[A](Self[A], A) -> Self[A]
  span[A](Self[A], (A) -> Bool) -> (Self[A], Self[A])
  take[A](Self[A], Int) -> Self[A]
  take_while[A](Self[A], (A) -> Bool) -> Self[A]
  try_collect[A, E : Error](Self[Result[A, E]]) -> Array[A]!E
  zip[A, B](Self[A], Self[B]) -> Self[(A, B)]
}
impl[A : Show] Show for T[A]

// Type aliases

// Traits

